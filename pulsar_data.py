# -*- coding: utf-8 -*-
"""Pulsar Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eWK-sv06WJcveiNuKdhQs4XPzlAMdGKe
"""

import numpy as np
import pandas as pd

df=pd.read_csv("/content/pulsar_data_train.csv")

df.head()

df['target_class'].value_counts

df.info()

#df['target_class].replace({0.0:0,1:0.1},inplace=True)
#df['target_class']=int(df["target_class"])
df["target_class"]=df["target_class"].astype(int)

df.head()

df['target_class']=df["target_class"].replace({0.0:0,1.0:1})

df.isnull().sum()

df[" Excess kurtosis of the integrated profile"] = df.fillna(df.groupby("target_class")[" Excess kurtosis of the integrated profile"].mean())

df.isnull().sum()

df[" Standard deviation of the DM-SNR curve"] = df.fillna(df.groupby("target_class")[" Standard deviation of the DM-SNR curve"].mean()) 
df[" Skewness of the DM-SNR curve"] = df.fillna(df.groupby("target_class")[" Skewness of the DM-SNR curve"].mean()) 
df.isnull().sum()

y = df["target_class"]
X = df.drop("target_class", axis = 1)

y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, stratify = y, random_state=25)

from imblearn.over_sampling import SMOTE

over = SMOTE()
ox, oy = over.fit_resample(X_train, y_train)

from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression()

logreg.fit(ox,oy)

print(logreg.score(ox,oy))
print(logreg.score(X_test,y_test))

from sklearn.tree import DecisionTreeClassifier

dctree = DecisionTreeClassifier(max_depth=4)

dctree.fit(ox,oy)

print(dctree.score(ox,oy))
print(dctree.score(X_test,y_test))

from sklearn.ensemble import RandomForestClassifier

rftree = RandomForestClassifier()

rftree.fit(ox,oy)

print(rftree.score(ox,oy))
print(rftree.score(X_test,y_test))

from sklearn.svm import LinearSVC 
from sklearn.svm import SVC

svmmodel = SVC()

svmmodel.fit(ox,oy)

print(svmmodel.score(ox,oy))
print(svmmodel.score(X_test,y_test))

X_test.value_counts()

y_test.value_counts()

from sklearn.metrics import precision_score

y_pred = svmmodel.predict(X_test)
print(y_pred[:100])

precision_score(y_test, y_pred)

from sklearn.metrics import recall_score

recall_score(y_test, y_pred)

from sklearn.metrics import f1_score

f1_score(y_test, y_pred)